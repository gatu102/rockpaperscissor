import tkinter as tk
from tkinter import messagebox
import random
import os
from collections import Counter

HIGH_SCORE_FILE = "rps_gui_highscore.txt"

def load_high_score():
    if os.path.exists(HIGH_SCORE_FILE):
        with open(HIGH_SCORE_FILE, "r") as f:
            try:
                return int(f.read())
            except:
                return 0
    return 0

def save_high_score(score):
    with open(HIGH_SCORE_FILE, "w") as f:
        f.write(str(score))

class RPSGame:
    def __init__(self, root):
        self.root = root
        self.root.title("üéÆ Rock Paper Scissors Showdown")
        self.choices = ["Rock", "Paper", "Scissors"]
        self.emojis = {"Rock":"ü™®","Paper":"üìÑ","Scissors":"‚úÇÔ∏è"}
        self.wins = 0
        self.losses = 0
        self.ties = 0
        self.high_score = load_high_score()
        self.player_history = []
        self.ai_level = tk.StringVar(value="Easy")  # default AI level

        self.create_widgets()

    def create_widgets(self):
        # Difficulty selection
        tk.Label(self.root, text="Select AI Difficulty:", font=("Arial", 12)).pack(pady=5)
        tk.OptionMenu(self.root, self.ai_level, "Easy", "Medium", "Hard").pack(pady=5)

        # Info Label
        self.label_info = tk.Label(self.root, text="Choose your move!", font=("Arial", 14))
        self.label_info.pack(pady=10)

        self.frame_buttons = tk.Frame(self.root)
        self.frame_buttons.pack(pady=5)

        # Buttons
        for choice in self.choices:
            btn = tk.Button(self.frame_buttons, text=f"{self.emojis[choice]} {choice}", width=10, height=2, font=("Arial",12),
                            command=lambda c=choice: self.play(c))
            btn.pack(side="left", padx=5)

        # Result display
        self.label_result = tk.Label(self.root, text="", font=("Arial", 12))
        self.label_result.pack(pady=10)

        # Scoreboard
        self.label_score = tk.Label(self.root, text=self.get_score_text(), font=("Arial", 12))
        self.label_score.pack(pady=10)

        # Reset Button
        self.btn_reset = tk.Button(self.root, text="Reset Game", command=self.reset_game)
        self.btn_reset.pack(pady=10)

    def get_score_text(self):
        return f"Wins: {self.wins} | Losses: {self.losses} | Ties: {self.ties} | High Score: {self.high_score}"

    def computer_choice(self):
        level = self.ai_level.get()
        if level == "Easy":
            return random.choice(self.choices)
        elif level == "Medium":
            if not self.player_history or random.random() < 0.5:
                return random.choice(self.choices)
            # 50% chance to counter last move
            last = self.player_history[-1]
            return self.counter_move(last)
        elif level == "Hard":
            if not self.player_history:
                return random.choice(self.choices)
            # Find player's most frequent move
            most_common = Counter(self.player_history).most_common(1)[0][0]
            return self.counter_move(most_common)

    def counter_move(self, move):
        # Return move that beats the input move
        if move == "Rock": return "Paper"
        elif move == "Paper": return "Scissors"
        elif move == "Scissors": return "Rock"

    def play(self, player_choice):
        self.player_history.append(player_choice)
        computer_choice = self.computer_choice()
        result_text = f"You chose {self.emojis[player_choice]} {player_choice}.\nComputer chose {self.emojis[computer_choice]} {computer_choice}.\n"

        # Determine winner
        if player_choice == computer_choice:
            result_text += "It's a tie!"
            self.ties += 1
        elif (player_choice=="Rock" and computer_choice=="Scissors") or \
             (player_choice=="Paper" and computer_choice=="Rock") or \
             (player_choice=="Scissors" and computer_choice=="Paper"):
            result_text += "üéâ You win!"
            self.wins += 1
        else:
            result_text += "üíÄ You lose!"
            self.losses += 1

        # Update high score
        if self.wins > self.high_score:
            self.high_score = self.wins
            save_high_score(self.high_score)

        self.label_result.config(text=result_text)
        self.label_score.config(text=self.get_score_text())

    def reset_game(self):
        self.wins = 0
        self.losses = 0
        self.ties = 0
        self.player_history = []
        self.label_result.config(text="")
        self.label_score.config(text=self.get_score_text())

if __name__ == "__main__":
    root = tk.Tk()
    game = RPSGame(root)
    root.mainloop()
